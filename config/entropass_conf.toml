# Information to prompt for and use in wordlist generation
[words]
list = [
       'elliot',
       '2021',
       'mr',
       'robot'
       ]

[results]
max_words = 0 # use 0 for no maximum. Any other number will write the top scoring words into a file.

[print]
shell = false
file = true
dir = '../results/'
fd = 'test_sort.txt'
sort = true
sortby = 'DESC'

[categories]
	[categories.names]
	file = '../categories/names/names.txt'
	weight = 10
	[categories.foods]
	file = '../categories/food/food.txt'
	weight = 10
	[categories.dates]
	file = '../categories/date/date.txt'
	weight = 10
	[categories.erotics]
	file = '../categories/erotic/erotic.txt'
	weight = 10
	[categories.hobbys]
	file = '../categories/hobby/hobby.txt'
	weight = 10
	[categories.keystrokes]
	file= '../categories/keystrokes/keystroke.txt'
	weight = 10
	[categories.movies]
	file = '../categories/movie/movie.txt'
	weight = 10
	[categories.music]
	file = '../categories/music/music.txt'
	weight = 10
	[categories.place_or]
	file = '../categories/place_of_residence/place.txt'
	weight = 10
	[categories.religion]
	file = '../categories/religion/religion.txt'
	weight = 10
	[categories.sport]
	file = '../categories/sport/sport.txt'
	weight = 10
	[categories.usernames]
	file = '../categories/usernames/uname.txt'
	weight = 10
	[categories.vehicle]
	file = '../categories/vehicle/vehicle.txt'
	weight = 10
	
[patterns]
birthdate = '(.*)[\d]+(\.|\/|\-|\_)[\d]+(\.|\/|\-|\_)[\d]+(.*)'

# Data that has been pre-processed into formats, chars, etc.
[processed-data]
dir = '../processed/'
format = 'format.txt'
char = 'char.txt'

[generating-rules]
use-rules = false

use-formats = false
formats = ['CCCCCC', 'ssssss', 'cccccc', 'Ccccccs'] # Allows the program to only generate passwords according to this format

use-regex = true
regex = ['^[a-z][A-Z]{2}[a-z][\d][a-z][^A-z^0-9]+$']#, '^[A-Z][^A-z][a-z]{2,6}[^A-z]$']

use-top-formats = false
top-formats = 10

max-generated = 50000000 # maximum number to be generated (before scoring)

[common-separators]
list = [
       '.', '-', '/', '*', ' '
       ]

[common-end]
list = [
       '!', '?', '1', '$', '#', '#!'
       ]

[common-replacements] # Based on 1337 dictionary
# Single backslashes are escape characters, which is why a double
# backslash is needed to represent a single backslash. e.q. '/\'=='/\\'
'a' = ['A', '@', '4', '^']#, '/\\', '/-\\', ''] # = @, 4, ^, /\\, /-\\
'b' = ['B', '8', '3', 'l', 'ß']#, 'l3']
'c' = ['C', '(', '<']#, '©', '¢']
'd' = ['D', ')', 'l)', 'l>']
'e' = ['E', '3', '£', '']
'f' = ['F', '#']#, 'ƒ', 'l=']
'g' = ['G', '6', '9']
'h' = ['H', '#']#, 'l-l', '(-)', '!-!', '}-{', '}{', 'l+l', ')+(', '!+!', '}+{']
'i' = ['I', '1', '!', '']
'j' = ['J']#, '_l', '_/']
'k' = ['K']#, 'l<', 'l(', 'l{', 'l<=']
'l' = ['L', '!', '1']#, 'l_']
'm' = ['M', '^^']#, 'l\\/l', '/\\/\\', 'l\\l\\']
'n' = ['N']#, 'l/l', '/\\/']
'o' = ['O', '0', '', '*']#, '()', '<>', '*', 'ø', 'Ó', '°']
'p' = ['P']#, 'l*', 'l>', '|D', 'l^', 'l+']
'q' = ['Q', '&']#, '(\\)', '¶']
'r' = ['R']#, 'l2', '®']
's' = ['S', '5', '$']#, '§']
't' = ['T', '+', '7']
'u' = ['U', '4', '']#, 'l_l', '/_/']
'v' = ['V']#, '\\/']
'w' = ['W']#, '|/\\|', '\\/\\/', '|/\\/', '\\/\\|']
'x' = ['X']#, '><', '}{', ':-:']
'y' = ['Y', '¥', '']
'z' = ['Z', '2']
'0' = ['', 'zero', 'null', 'none']
'1' = ['', 'one']
'2' = ['', 'two']
'3' = ['', 'three']
'4' = ['', 'four']
'5' = ['', 'five']
'6' = ['', 'six']
'7' = ['', 'seven']
'8' = ['', 'eight']
'9' = ['', 'nine']
'`' = []
'~' = []
'!' = ['1', '|']
'@' = ['a', 'A', 'at']
'#' = []
'$' = []
'%' = []
'^' = []
'&' = []
'*' = []
'(' = []
')' = []
'-' = ['/', '_', '\\', '.', '|']
'_' = ['/', '-', '\\', '.', '|']
'=' = []
'+' = []
'<' = []
'>' = []
',' = []
'.' = [',', '/', '*', '_', '-']#, '\\']
'/' = ['-', '_', '.']#, '\\']
'?' = []
'\\' = ['/'] # (This is a single backslash)
'|' = []
'{' = []
'[' = []
'}' = []
']' = []
';' = []
':' = []
'"' = [''''''']
''''''' = ['"']