#!/usr/bin/env python3
from pwd_gen import Pwd_gen
from pwd_score import Pwd_score
from print_utils import *
from colorama import Fore, Style, Back
from threading import Thread
import argparse
import toml
import sys

RED = Fore.RED
GREEN = Fore.GREEN
RESET = Style.RESET_ALL

class EntroPass():
    """
    """
    config_fd = '../config/entropass_conf.toml'
    passwords = []
    scored_pwds = {}
    pass_w_scores = []
    debug = False
    
    def __init__(self):
        """
        """
        try:
            self.config = toml.load(self.config_fd)
            success('Loaded configuration from', self.config_fd)
        except Exception as e:
            error('Could not load', self.config_fd,
                  ':', e)
            sys.exit(1)
        parser = argparse.ArgumentParser()
        #parser.add_argument('-k', '--keywords', required=False)
        parser.add_argument('-d', '--debug', required=False, action='store_true')
        args = parser.parse_args()
        
        if args.debug:
            self.debug = True
        
        self.gen = Pwd_gen(self.config_fd)
        self.score_pwd = Pwd_score(self.config_fd)
        self.seed_words = [word.lower() for word in self.config['words']['list']]

    def run(self):
        """
        """
        try:
            self.run_seeding_expanse()
            self.run_permutations()
            
            self.run_replace()
            
            self.__rm_duplicates()
            self.__score_pwds()
        except KeyboardInterrupt:
            warning('Interrupt received, trying to write results to file')
            
        if self.config['print']['shell']:
            self.print_passwords()
            cprint('Generated', self.get_count(), 'passwords.')

        if self.config['print']['file']:
            self.write_t_file()
            cprint('Wrote', self.get_count(), 'passwords to', self.config['print']['fd'])
        

    def run_seeding_expanse(self):
        """
        """
        self.passwords.append(self.seed_words)

        length = len(self.seed_words)
        ctr = length
        for w in self.seed_words:
            res = self.gen.upper_perms(word=w)
            self.passwords.append(res)
            cprint('Expanding seed words: ', length, '->', ctr, end='\r')
            ctr += len(res)
        print()
        
    def run_permutations(self):
        """
        """
        cprint('Generating permutations')
        self.passwords.append(self.gen.word_perms(words=self.seed_words,
                                                  nr_in_result=2))

    def run_replace(self):
        """
        """
        cprint('Replacing characters')
        new_psswds = []
        ctr = 0
        for passwords in self.passwords:
            for p in passwords:
                new_psswds += self.gen.rep_cmmn_chars(word=p,
                                                      iterations=4)
                cprint('Resulting passwords:', ctr, end='\r')
                ctr = len(new_psswds)

        print()
        self.passwords.append(new_psswds)

    def get_count(self):
        """
        """
        count = len(self.passwords)

        return count

    def print_passwords(self):
        """
        """
        print(', '.join(self.passwords))

    def write_t_file(self):
        """
        """
        with open(self.config['print']['fd'], 'w') as fd:
            for p in self.passwords:
                fd.write(p+'\n')

    def __rm_duplicates(self):
        """
        """
        cprint('Removing duplicates')
        passwords = []
        for ps in self.passwords:
            passwords += ps
        passwords = list(dict.fromkeys(passwords))
        self.passwords = passwords
        cprint('Remaining:', len(self.passwords))

    def __score_pwds(self):
        """
        """
        self.sorted_pwds = {}
        length = len(self.passwords)
        ctr = 1
        try:
            for password in self.passwords:
                if not(type(password) == str):
                    raise ValueError('Could not score passwords, passwords need to be '+\
                                     'of type str:'+str(password))
                cprint('Scoring password', ctr, 'of', length, end='\r')
                self.sorted_pwds[password] = self.score_pwd.score_pwd(pwd=password)
                ctr+=1
        except Exception as e:
            error('Could not complete scoring:', e)

        self.passwords = []
        print()
        cprint('Sorting passwords')

        self.sorted_pwds = self.__sort_scored(self.sorted_pwds)

        try:
            for pwd, score in self.sorted_pwds.items():
                self.passwords.append(pwd)
        except Exception as e:
            error('Could not append sorted scored passwords to list:', e)
            sys.exit(1)

    def __sort_scored(self, scored):
        """
        """
        try:
            srtd = {key: value for  key, value in sorted(scored.items(), key=lambda item: item[1],
                                                         reverse=True)}
            return srtd
        except Exception as e:
            error('Could not sort scored passwords:', e)
            sys.exit(1)
    
if __name__=='__main__':
    ep = EntroPass()
    ep.run()
