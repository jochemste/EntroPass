User Manual
===========

.. toctree::
   :maxdepth: 4

	      
Configuration
-------------

The configuration file for EntroPass is found in the config/ directory with the name entropass_conf.toml. TOML is used for its readable format and ease of use with Python3. Following is an explanation of the configuration file, starting from the top and working to the end of the file.

words
*****

.. attribute:: list

   This is the list of seed words for the program. It should be filled with personal information on the target. This is recommended to be a combination of usernames, names of close relations, pets, nicknames and other names in general. Next to this, hobbies, animals, keyboard strokes and erotic (and mostly offensive) phrases are popular in common passwords. Also, the most popular characters are lower case alphabetical characters and digits. By default, the seed words are all converted to lowercase, since uppercase is generated by the password generator. Once the information is filled in, the result should look like the following:

   .. code-block::

      [words]
      list = [
       'johann',
       '01-12-1890',
       '2021',
       'jack'
       ]

results
*******

.. attribute:: max_words

   If there should be a limit to the number of passwords in the final list, this can be set to any value. This will not reduce processing time, since it will first generate the passwords, then score and sort them, after which the top N words are written into the output file. Setting this to 0 will result in no limit.

   .. code-block::

      max_words = 0 # no maximum

print
*****

.. attribute:: shell

   Setting this to true will print all passwords to the shell. Default is false.

   .. code-block::

      shell = false # do not print to shell
	       
.. attribute:: file

   Setting this to true will print the passwords to the configured file.

   .. code-block::

      file = true # print results to file
	       
.. attribute:: dir

   Directory where the results should be written into (should end with a '/').

   .. code-block::

      dir = '../results/' # print results to file in the specified directory
	       
.. attribute:: fd

   File name to write results into. The file will be created or overwritten in the previously specified directory.

   .. code-block::

      fd = 'results.txt' # print results to results.txt
	       
.. attribute:: sort

   Set to true to sort the generated passwords.

   .. code-block::

      sort = true
   
.. attribute:: sortby

   Set to 'DESC' or 'ASC' to sort by score, starting with the highest score and working down to the lower scores. This is recommended, since a tool like Hydra will start using passwords, starting at the top of the file (as will most other tools most likely).

   .. code-block::

      sortby = 'DESC' # Sort by score, starting with top scoring password
   
categories
**********

This holds the directories to the category lists that are used for scoring.

.. attribute:: names

   List of names to be used for scoring

   .. code-block::

      names = '../categories/names/names.txt'

.. attribute:: foods

   List of foods to be used for scoring

   .. code-block::

      names = '../categories/food/food.txt'

patterns
********

Regular expression patterns to check for matches. If it matches, the password score will be incremented.

.. attribute:: birthdate

   Birthdate pattern. Matches birthdates such as 12-12-2012, 12-12-12, 12/12-2021, 12.12.2021, etc.

   .. code-block::

      birthdate = '(.*)[\d]+(\.|\/|\-|\_)[\d]+(\.|\/|\-|\_)[\d]+(.*)'

processed-data
**************

.. attribute:: dir
   :noindex:

   Directory where the processed formats and characters are stored.

   .. code-block::

      dir = '../processed/'

.. attribute:: format

   File with formats and the number of  occurrences.

   .. code-block::

      format = 'format.txt'

.. attribute:: char

   File with chars and the number of  occurrences.

   .. code-block::

      char = 'char.txt'

generating-rules
****************

Set specific rules to filter the generated passwords and reduce processing time, by not scoring all passwords.

.. attribute:: use-rules

   Set to true to use custom rules. Not implemented yet.

   .. code-block::

      use-rules = false

.. attribute:: use-formats

   Set to true to use custom specified formats to filter output.

   .. code-block::

      use-formats = false

.. attribute:: formats

   The custom formats that the generated password should match with to be used. Only use if use-formats is set to true.

   .. code-block::

      formats = ['cccccc']

.. attribute:: use-top-formats

   Set to true to use the top N password formats to match the generated passwords against.

   .. code-block::

      use-top-formats = true

.. attribute:: top-formats

   The number of formats to use to filter the generated passwords. Only used if use-top-formats is set to true.

   .. code-block::

      top-formats = 1000 # use top 1000 most used formats to match passwords against

common-separators
*****************

.. attribute:: list
   :noindex:

   List of characters that are often used to separate words.

   .. code-block::

      list = [
       '.', '-', '/', '*'
       ]

common-end
**********

.. attribute:: list
   :noindex:

   List of characters that are often used to end passwords.

   .. code-block::

      list = [
       '!', '?', '.', '123', '12345'
       ]

common-replacements
*******************

This is a defined 'library' of characters that are often used to replace others. It is loosely based on the '1337' principle. Each of the characters defined will be replaced by the others. For example, if the word is 'word' and the replacements for 'w', 'o', 'r' and 'd' are defined to be the following:

.. code-block::

   'w' = []
   'o' = ['0', '']
   'r' = ['l2']
   'd' = [')']

This will result in the generation of variations of 'word' like 'w0rd', 'ord', 'wol2d', 'wor)', 'wr)', etc.
The characters on the left side of the = will only be processed correctly if they are single characters, while the characters on the right can be of arbitrary length.


Usage
-----

Options
*******

To get the options for EntroPass, simply run it as follows:

.. code-block::

   ./entropass.py --help

This will output the optional arguments and how to use them. At the time of writing, the output is the following:

.. code-block::

   usage: entropass.py [-h] [-d] [-u] [-c COMPARE]

   optional arguments:
   -h, --help            show this help message and exit
   -d, --debug           Turn on debugging mode. NOT IMPLEMENTED YET
   -u, --update          Update the formats and characters with the passwords
                         in the passwords directory. WARNING! This can take a
                         long time depending on the number of passwords in the
                         passwowords directory.
   -c COMPARE, --compare COMPARE
                         Compare password to results.

Basic Running
*************

To run the program, first make sure the configuration is set to your likings. After this, the program can be run by using the following:

.. code-block::

   ./entropass.py

Comparing with existing password
********************************

To compare the generated passwords with an existing password, the following option can be used:

.. code-block::

   ./entropass.py -c COMPARE

For example, for a password like johann12345 the command would be like the following:

.. code-block::

   ./entropass.py -c johann12345

This will run the program as usual, but it checks if the given password exists in the list of generated passwords. After this, the passwords get scored and the number in the list of passwords will be given to demonstrate how many guesses it would take to get this password, using the generated password list. An example output is the following:

.. code-block::

   [*] Loaded configuration from ../config/entropass_conf.toml
   [*] Expanding seed words:  4 -> 22
   [*] Generating permutations
   [*] Replacing characters
   [*] Resulting passwords: 339722
   [*] Removing duplicates
   [*] Remaining: 314160
   [*] Filtering passwords with formats: 314160 ...
   [*] Filtered passwords with formats: 1088
   [!] Found the password in list of 1088 passwords
   [*] Scoring password 1088 of 1088
   [*] Sorting passwords
   [!] Password is #692 in the scored list.
   [*] Wrote 1088 passwords to test_sort.txt

This is meant to demonstrate the vulnerability of someones password, but can also be used to make sure a certain password is in the list, to check if more seed words should be added or not.

What to do next
---------------

Once you've generated your wordlist, you can simply use tools such as John the Ripper or Hydra to perform penetration tests on systems. Remember, this tool is not meant to be used for illegal purposes. Consent from the target is required!
